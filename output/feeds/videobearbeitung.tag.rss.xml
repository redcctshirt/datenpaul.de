<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>datenpaul</title><link>https://www.datenpaul.de/</link><description></description><atom:link href="https://www.datenpaul.de/feeds/videobearbeitung.tag.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 29 May 2012 19:34:00 +0200</lastBuildDate><item><title>popcorn.js - Hallo Welt</title><link>https://www.datenpaul.de/popcorn-js-hallo-welt.html</link><description>&lt;p&gt;Durch diesen Artikel möchte ich auf &lt;a href="http://popcornjs.org/" title="popcornjs"&gt;popcorn.js&lt;/a&gt; aufmerksam machen.
popcorn.js ist ein &lt;a href="https://de.wikipedia.org/wiki/HTML5" title="WP:HTML5"&gt;HTML5&lt;/a&gt; Media Javascript Framework von &lt;a href="https://de.wikipedia.org/wiki/Mozilla" title="WP:Mozilla"&gt;Mozilla&lt;/a&gt;.
Jeder der interaktive Medien ins Web bringen möchte kann dieses
Framework einsetzen. Auf der Seite &lt;a href="http://mozillapopcorn.js" title="popcorn Project"&gt;mozillapopcorn.js&lt;/a&gt; findet man das
Projekt popcorn. Für das Framework gibt es die Seite &lt;a href="http://popcornjs.org/" title="popcorn.js"&gt;popcornjs.org&lt;/a&gt;.
Demos und Dokumentationen geben eine Übersicht über die Features die
dieses Framework mit sich bringt. Dynamische Inhalte können abhängig von
der Zeitposition eines Videos angezeigt werden. Ein Beispiel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://popcornjs.org/code/dist/popcorn-complete.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
document.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, function() {

var popcorn = Popcorn(&amp;quot;#video&amp;quot;);

popcorn.footnote({
        start: 0,
        end: 3,
        target: &amp;quot;footnote&amp;quot;,
        text: &amp;quot;Hallo Welt&amp;quot;
       })
.footnote({
        start: 3,
        end: 6,
        target: &amp;quot;footnote&amp;quot;,
        text: &amp;quot;popcorn.js&amp;quot;
});

popcorn.play();
popcorn.volume(0); // 0 .. 1.0

}, false );
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;800&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;600&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;video&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;o.ogv&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;controls=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;preload=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footnote&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Zeile 2 wird das popcorn.js Framework geladen. Durch das Attribut src
im Video-Tag (Zeile 28) wird die Videodatei festgelegt und per Attribut
id wird die einmalige Identifikationszeichenkette bestimmt. Neben dem
Video-Tag gibt es ebenso einen div-Container (Zeile 29) mit der id
footnote. Mittels Funktion
&lt;code&gt;document.addEventListener("DOMContentLoaded", function() { }, false);&lt;/code&gt;
in Zeile 4 wird sichergestellt dass die Seite vollständig geladen wird
bevor die Javascript-Anweisungen ausgeführt werden. Anhand des Befehls
&lt;code&gt;var popcorn = Popcorn("#video");&lt;/code&gt; in Zeile 6 wird eine neue
Popcorn-Instanz bezüglich der Video-Tag id video erstellt. Das Plugin
footnote macht es möglich dass Text (Fussnoten) zu einem Element auf der
Website hinzugefügt wird und kommt in Zeile 8 und 14 zum Einsatz. Von
Sekunde 0 bis 3 wird der Text "Hallo Welt" im div-Container mit der id
footnote angezeigt. Von Sekunden 3 bis 6 wird der Text "popcorn.js"
ebenso im div-Container mit der id footnote angezeigt. Durch den Befehl
&lt;code&gt;popcorn.play();&lt;/code&gt; in Zeile 21 wird das Video abgespielt.
&lt;code&gt;popcorn.volume(0);&lt;/code&gt; in Zeile 22 setzt die Lautstärke auf 0.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heiko</dc:creator><pubDate>Tue, 29 May 2012 19:34:00 +0200</pubDate><guid>tag:www.datenpaul.de,2012-05-29:popcorn-js-hallo-welt.html</guid><category>HTML5</category><category>Javascript</category><category>popcorn.js</category><category>Programmierung</category><category>video</category><category>Videobearbeitung</category></item><item><title>Videobilder spiegeln</title><link>https://www.datenpaul.de/videobilder-spiegeln.html</link><description>&lt;p&gt;Das Tool &lt;a href="http://de.wikipedia.org/wiki/Ffmpeg" title="ffmpeg"&gt;ffmpeg&lt;/a&gt; macht es möglich. Der Videofilter hflip spiegelt die
Videobilder&lt;br /&gt;
horizontal und der Videofilter vflip spiegelt sie vertikal. Unnötige
Optionen&lt;br /&gt;
und Paramenter lasse ich bei diesen Beispielen weg.&lt;/p&gt;
&lt;p&gt;Beispiele:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -i a.ogv -vf "vflip" b.webm # Den Videoinput a.ogv vertikal spiegeln, Ergebnis: b.webm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ffmpeg -i a.ogv -vf "hflip" b.webm&lt;br /&gt;
# Den Videoinput a.ogv horizontal spiegeln, Ergebnis: b.webm&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heiko</dc:creator><pubDate>Fri, 02 Dec 2011 16:23:00 +0100</pubDate><guid>tag:www.datenpaul.de,2011-12-02:videobilder-spiegeln.html</guid><category>ffmpeg</category><category>hflip</category><category>Linux</category><category>vflip</category><category>Videobearbeitung</category><category>Videofilter</category></item><item><title>farbige Vierecke im Video anzeigen lassen</title><link>https://www.datenpaul.de/farbige-vierecke-im-video-anzeigen-lassen.html</link><description>&lt;p&gt;Mit &lt;a href="http://de.wikipedia.org/wiki/Ffmpeg" title="Link zu WP:ffmpeg"&gt;ffmpeg&lt;/a&gt;, dem Videofilter overlay und der Videoquelle color ist es
möglich farbige Vierecke ins Video zu zaubern. Der &lt;a href="http://www.datenpaul.de/archives/121" title="Link zu overlay-Artikel"&gt;Videofilter
overlay&lt;/a&gt; sollte inzwischen bekannt sein. Auch bei diesem Beispiel
lasse ich alle unnötigen Optionen einfach weg.&lt;/p&gt;
&lt;p&gt;Hilfreiche Daten für das Beispiel:&lt;br /&gt;
Input-Videodatei: a.ogv&lt;br /&gt;
Output-Videodatei: b.webm&lt;br /&gt;
Videogröße: 1280×720 (Breite: 1280 Pixel, Höhe: 720 Pixel)&lt;/p&gt;
&lt;p&gt;Mit folgendem Muster erstellt man eine Farbquelle:&lt;br /&gt;
"color=Farbe:Framegröße:Framerate" (Farbe: 0xRRGGBB[AA] oder def.
Farbe,&lt;br /&gt;
z.B. "color=red@1.0:100x200:25")&lt;/p&gt;
&lt;p&gt;Beispiele:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -i a.ogv -vf "color=red@0.3:100x200:25 [color]; [in][color] overlay [out]" b.webm # durchsichtiges rotes Viereck (Breite: 100 Pixel, Höhe: 200 Pixel) an der Stelle 0:0 im Video&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ffmpeg -i a.ogv -vf "color=blue@1.0:200x100:25 [color]; [in][color]
overlay=100:100 [out]" b.webm&lt;br /&gt;
# blaues Viereck (Breite: 200 Pixel, Höhe: 100 Pixel) an der Stelle
100:100 im Video&lt;/p&gt;
&lt;p&gt;ffmpeg -i a.ogv -vf "color=blue@1.0:200x100:25 [color1];
color=red@0.2:100x100:25 [color2] [in][color1] overlay=100:100
[in+color1]; [in+color1][color2] overlay=500:100 [out]" b.webm&lt;br /&gt;
# 2 Vierecke&lt;/p&gt;
&lt;p&gt;ffmpeg -i a.ogv -vf "movie=logo.png [logo]; color=red@0.2:100x100:25
[color]; [in][color] overlay=10:10 [in+color]; [in+color][logo]
overlay=10:10 [out]" b.webm&lt;br /&gt;
# Logo + Viereck&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heiko</dc:creator><pubDate>Sat, 27 Aug 2011 23:45:00 +0200</pubDate><guid>tag:www.datenpaul.de,2011-08-27:farbige-vierecke-im-video-anzeigen-lassen.html</guid><category>Fedora</category><category>ffmpeg</category><category>Linux</category><category>Videobearbeitung</category></item><item><title>Ein Logo im Video anzeigen lassen</title><link>https://www.datenpaul.de/ein-logo-im-video-anzeigen-lassen.html</link><description>&lt;p&gt;Mit &lt;a href="http://de.wikipedia.org/wiki/Ffmpeg" title="WP:ffmpeg"&gt;ffmpeg&lt;/a&gt; und dem Videofilter overlay ist man in der Lage ein Logo
ins Video zu zaubern. Um Übersichtlichkeit zu gewährleisten lasse ich
hier bei diesem Beispiel mit ffmpeg alle anderen Optionen die man sonst
so benutzt wie z.B. -b für die &lt;a href="http://de.wikipedia.org/wiki/Bitrate" title="WP:Bitrate"&gt;Bitrate&lt;/a&gt; einfach weg.&lt;/p&gt;
&lt;p&gt;Hilfreiche Daten für das Beispiel:&lt;br /&gt;
Input-Videodatei: a.ogv&lt;br /&gt;
Output-Videodatei: b.webm&lt;br /&gt;
Videogröße: 1280x720 (Breite: 1280 Pixel, Höhe: 720 Pixel)&lt;br /&gt;
Bilddatei: logo.png&lt;br /&gt;
Bildgröße: 50x50 (Breite: 50 Pixel, Höhe: 50 Pixel)&lt;/p&gt;
&lt;p&gt;Mit folgendem Muster setzt man den Videofilter overlay ein:&lt;br /&gt;
&lt;code&gt;-vf "movie=bilddatei.png [logo]; [in][logo] overlay=x:y [out]"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Die Bilddatei mit dem Logo wird durch movie=bilddatei.png [logo]
definiert. Durch overlay=x:y kann man die Stelle angeben wo das Logo
dann erscheinen soll. (z.B. overlay=10:10 - das Logo wird nun oben links
in der Ecke angezeigt)&lt;/p&gt;
&lt;p&gt;Einige hilfreiche Variablen die eingesetzt werden können:&lt;br /&gt;
main_w oder W - für die Breite des Videos (hier 1280)&lt;br /&gt;
main_h, H - für die Höhe des Videos (hier 720)&lt;br /&gt;
overlay_w, w - für die Breite des Logos (hier 50)&lt;br /&gt;
overlay_h, h - für die Höhe des Logos (hier 50)&lt;/p&gt;
&lt;p&gt;Beispiele:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -i a.ogv -vf "movie=logo.png [logo]; [in][logo] overlay=10:10 [out]" b.webm # Logo oben links&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ffmpeg -i a.ogv -vf "movie=logo.png [logo]; [in][logo]
overlay=main_w-overlay_w-10:10 [out]" b.webm&lt;br /&gt;
# Logo oben rechts, mit Zahlen: overlay=1280-50-10:10 -&gt;
overlay=1220:10&lt;/p&gt;
&lt;p&gt;ffmpeg -i a.ogv -vf "movie=logo.png [logo]; [in][logo]
overlay=10:main_h-overlay_h-10 [out]" b.webm&lt;br /&gt;
# Logo unten links, mit Zahlen: overlay=10:720-50-10 -&gt;
overlay=10:660&lt;/p&gt;
&lt;p&gt;ffmpeg -i a.ogv -vf "movie=logo.png [logo]; [in][logo]
overlay=main_w-overlay_w-10:main_h-overlay_h-10 [out]" b.webm&lt;br /&gt;
# Logo unten rechts, mit Zahlen: overlay=1280-50-10:720-50-10 -&gt;
overlay=1220:660&lt;/p&gt;
&lt;p&gt;ffmpeg -i a.ogv -vf "movie=logo.png [logo1]; movie=logo2.png [logo2];
[in][logo1] overlay=main_w-overlay_w-10:main_h-overlay_h-10
[in+logo1]; [in+logo1][logo2] overlay=10:10 [out]" b.webm&lt;br /&gt;
# 2 Logos&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heiko</dc:creator><pubDate>Thu, 25 Aug 2011 21:54:00 +0200</pubDate><guid>tag:www.datenpaul.de,2011-08-25:ein-logo-im-video-anzeigen-lassen.html</guid><category>Fedora</category><category>ffmpeg</category><category>Linux</category><category>Logo</category><category>Videobearbeitung</category></item></channel></rss>